/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "guid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub guid: Option<Option<String>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "qualityWeight", skip_serializing_if = "Option::is_none")]
    pub quality_weight: Option<i32>,
    #[serde(rename = "age", skip_serializing_if = "Option::is_none")]
    pub age: Option<i32>,
    #[serde(rename = "ageHours", skip_serializing_if = "Option::is_none")]
    pub age_hours: Option<f64>,
    #[serde(rename = "ageMinutes", skip_serializing_if = "Option::is_none")]
    pub age_minutes: Option<f64>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(rename = "indexerId", skip_serializing_if = "Option::is_none")]
    pub indexer_id: Option<i32>,
    #[serde(rename = "indexer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub indexer: Option<Option<String>>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "subGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sub_group: Option<Option<String>>,
    #[serde(rename = "releaseHash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_hash: Option<Option<String>>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "discography", skip_serializing_if = "Option::is_none")]
    pub discography: Option<bool>,
    #[serde(rename = "sceneSource", skip_serializing_if = "Option::is_none")]
    pub scene_source: Option<bool>,
    #[serde(rename = "airDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub air_date: Option<Option<String>>,
    #[serde(rename = "authorName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_name: Option<Option<String>>,
    #[serde(rename = "bookTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub book_title: Option<Option<String>>,
    #[serde(rename = "approved", skip_serializing_if = "Option::is_none")]
    pub approved: Option<bool>,
    #[serde(rename = "temporarilyRejected", skip_serializing_if = "Option::is_none")]
    pub temporarily_rejected: Option<bool>,
    #[serde(rename = "rejected", skip_serializing_if = "Option::is_none")]
    pub rejected: Option<bool>,
    #[serde(rename = "rejections", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rejections: Option<Option<Vec<String>>>,
    #[serde(rename = "publishDate", skip_serializing_if = "Option::is_none")]
    pub publish_date: Option<String>,
    #[serde(rename = "commentUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment_url: Option<Option<String>>,
    #[serde(rename = "downloadUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_url: Option<Option<String>>,
    #[serde(rename = "infoUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub info_url: Option<Option<String>>,
    #[serde(rename = "downloadAllowed", skip_serializing_if = "Option::is_none")]
    pub download_allowed: Option<bool>,
    #[serde(rename = "releaseWeight", skip_serializing_if = "Option::is_none")]
    pub release_weight: Option<i32>,
    #[serde(rename = "customFormats", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_formats: Option<Option<Vec<models::CustomFormatResource>>>,
    #[serde(rename = "customFormatScore", skip_serializing_if = "Option::is_none")]
    pub custom_format_score: Option<i32>,
    #[serde(rename = "magnetUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub magnet_url: Option<Option<String>>,
    #[serde(rename = "infoHash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub info_hash: Option<Option<String>>,
    #[serde(rename = "seeders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub seeders: Option<Option<i32>>,
    #[serde(rename = "leechers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub leechers: Option<Option<i32>>,
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<models::DownloadProtocol>,
    #[serde(rename = "indexerFlags", skip_serializing_if = "Option::is_none")]
    pub indexer_flags: Option<i32>,
    #[serde(rename = "authorId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_id: Option<Option<i32>>,
    #[serde(rename = "bookId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub book_id: Option<Option<i32>>,
    #[serde(rename = "downloadClientId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_client_id: Option<Option<i32>>,
    #[serde(rename = "downloadClient", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_client: Option<Option<String>>,
}

impl ReleaseResource {
    pub fn new() -> ReleaseResource {
        ReleaseResource {
            id: None,
            guid: None,
            quality: None,
            quality_weight: None,
            age: None,
            age_hours: None,
            age_minutes: None,
            size: None,
            indexer_id: None,
            indexer: None,
            release_group: None,
            sub_group: None,
            release_hash: None,
            title: None,
            discography: None,
            scene_source: None,
            air_date: None,
            author_name: None,
            book_title: None,
            approved: None,
            temporarily_rejected: None,
            rejected: None,
            rejections: None,
            publish_date: None,
            comment_url: None,
            download_url: None,
            info_url: None,
            download_allowed: None,
            release_weight: None,
            custom_formats: None,
            custom_format_score: None,
            magnet_url: None,
            info_hash: None,
            seeders: None,
            leechers: None,
            protocol: None,
            indexer_flags: None,
            author_id: None,
            book_id: None,
            download_client_id: None,
            download_client: None,
        }
    }
}

