/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DevelopmentConfigResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "metadataSource", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata_source: Option<Option<String>>,
    #[serde(rename = "consoleLogLevel", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub console_log_level: Option<Option<String>>,
    #[serde(rename = "logSql", skip_serializing_if = "Option::is_none")]
    pub log_sql: Option<bool>,
    #[serde(rename = "logRotate", skip_serializing_if = "Option::is_none")]
    pub log_rotate: Option<i32>,
    #[serde(rename = "filterSentryEvents", skip_serializing_if = "Option::is_none")]
    pub filter_sentry_events: Option<bool>,
}

impl DevelopmentConfigResource {
    pub fn new() -> DevelopmentConfigResource {
        DevelopmentConfigResource {
            id: None,
            metadata_source: None,
            console_log_level: None,
            log_sql: None,
            log_rotate: None,
            filter_sentry_events: None,
        }
    }
}

