/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityHistoryEventType {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "grabbed")]
    Grabbed,
    #[serde(rename = "bookFileImported")]
    BookFileImported,
    #[serde(rename = "downloadFailed")]
    DownloadFailed,
    #[serde(rename = "bookFileDeleted")]
    BookFileDeleted,
    #[serde(rename = "bookFileRenamed")]
    BookFileRenamed,
    #[serde(rename = "bookImportIncomplete")]
    BookImportIncomplete,
    #[serde(rename = "downloadImported")]
    DownloadImported,
    #[serde(rename = "bookFileRetagged")]
    BookFileRetagged,
    #[serde(rename = "downloadIgnored")]
    DownloadIgnored,

}

impl std::fmt::Display for EntityHistoryEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "unknown"),
            Self::Grabbed => write!(f, "grabbed"),
            Self::BookFileImported => write!(f, "bookFileImported"),
            Self::DownloadFailed => write!(f, "downloadFailed"),
            Self::BookFileDeleted => write!(f, "bookFileDeleted"),
            Self::BookFileRenamed => write!(f, "bookFileRenamed"),
            Self::BookImportIncomplete => write!(f, "bookImportIncomplete"),
            Self::DownloadImported => write!(f, "downloadImported"),
            Self::BookFileRetagged => write!(f, "bookFileRetagged"),
            Self::DownloadIgnored => write!(f, "downloadIgnored"),
        }
    }
}

impl Default for EntityHistoryEventType {
    fn default() -> EntityHistoryEventType {
        Self::Unknown
    }
}

