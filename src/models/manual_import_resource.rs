/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualImportResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::AuthorResource>>,
    #[serde(rename = "book", skip_serializing_if = "Option::is_none")]
    pub book: Option<Box<models::BookResource>>,
    #[serde(rename = "foreignEditionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub foreign_edition_id: Option<Option<String>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "qualityWeight", skip_serializing_if = "Option::is_none")]
    pub quality_weight: Option<i32>,
    #[serde(rename = "downloadId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_id: Option<Option<String>>,
    #[serde(rename = "indexerFlags", skip_serializing_if = "Option::is_none")]
    pub indexer_flags: Option<i32>,
    #[serde(rename = "rejections", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rejections: Option<Option<Vec<models::Rejection>>>,
    #[serde(rename = "audioTags", skip_serializing_if = "Option::is_none")]
    pub audio_tags: Option<Box<models::ParsedTrackInfo>>,
    #[serde(rename = "additionalFile", skip_serializing_if = "Option::is_none")]
    pub additional_file: Option<bool>,
    #[serde(rename = "replaceExistingFiles", skip_serializing_if = "Option::is_none")]
    pub replace_existing_files: Option<bool>,
    #[serde(rename = "disableReleaseSwitching", skip_serializing_if = "Option::is_none")]
    pub disable_release_switching: Option<bool>,
}

impl ManualImportResource {
    pub fn new() -> ManualImportResource {
        ManualImportResource {
            id: None,
            path: None,
            name: None,
            size: None,
            author: None,
            book: None,
            foreign_edition_id: None,
            quality: None,
            release_group: None,
            quality_weight: None,
            download_id: None,
            indexer_flags: None,
            rejections: None,
            audio_tags: None,
            additional_file: None,
            replace_existing_files: None,
            disable_release_switching: None,
        }
    }
}

