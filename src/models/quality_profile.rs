/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QualityProfile {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "upgradeAllowed", skip_serializing_if = "Option::is_none")]
    pub upgrade_allowed: Option<bool>,
    #[serde(rename = "cutoff", skip_serializing_if = "Option::is_none")]
    pub cutoff: Option<i32>,
    #[serde(rename = "minFormatScore", skip_serializing_if = "Option::is_none")]
    pub min_format_score: Option<i32>,
    #[serde(rename = "cutoffFormatScore", skip_serializing_if = "Option::is_none")]
    pub cutoff_format_score: Option<i32>,
    #[serde(rename = "formatItems", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub format_items: Option<Option<Vec<models::ProfileFormatItem>>>,
    #[serde(rename = "items", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub items: Option<Option<Vec<models::QualityProfileQualityItem>>>,
}

impl QualityProfile {
    pub fn new() -> QualityProfile {
        QualityProfile {
            id: None,
            name: None,
            upgrade_allowed: None,
            cutoff: None,
            min_format_score: None,
            cutoff_format_score: None,
            format_items: None,
            items: None,
        }
    }
}

