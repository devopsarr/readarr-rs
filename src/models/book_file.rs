/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BookFile {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(rename = "modified", skip_serializing_if = "Option::is_none")]
    pub modified: Option<String>,
    #[serde(rename = "dateAdded", skip_serializing_if = "Option::is_none")]
    pub date_added: Option<String>,
    #[serde(rename = "originalFilePath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub original_file_path: Option<Option<String>>,
    #[serde(rename = "sceneName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scene_name: Option<Option<String>>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "indexerFlags", skip_serializing_if = "Option::is_none")]
    pub indexer_flags: Option<models::IndexerFlags>,
    #[serde(rename = "mediaInfo", skip_serializing_if = "Option::is_none")]
    pub media_info: Option<Box<models::MediaInfoModel>>,
    #[serde(rename = "editionId", skip_serializing_if = "Option::is_none")]
    pub edition_id: Option<i32>,
    #[serde(rename = "calibreId", skip_serializing_if = "Option::is_none")]
    pub calibre_id: Option<i32>,
    #[serde(rename = "part", skip_serializing_if = "Option::is_none")]
    pub part: Option<i32>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::AuthorLazyLoaded>>,
    #[serde(rename = "edition", skip_serializing_if = "Option::is_none")]
    pub edition: Option<Box<models::EditionLazyLoaded>>,
    #[serde(rename = "partCount", skip_serializing_if = "Option::is_none")]
    pub part_count: Option<i32>,
}

impl BookFile {
    pub fn new() -> BookFile {
        BookFile {
            id: None,
            path: None,
            size: None,
            modified: None,
            date_added: None,
            original_file_path: None,
            scene_name: None,
            release_group: None,
            quality: None,
            indexer_flags: None,
            media_info: None,
            edition_id: None,
            calibre_id: None,
            part: None,
            author: None,
            edition: None,
            part_count: None,
        }
    }
}

