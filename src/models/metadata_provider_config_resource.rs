/*
 * Readarr
 *
 * Readarr API docs
 *
 * The version of the OpenAPI document: v0.4.10.2734
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataProviderConfigResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "writeAudioTags", skip_serializing_if = "Option::is_none")]
    pub write_audio_tags: Option<models::WriteAudioTagsType>,
    #[serde(rename = "scrubAudioTags", skip_serializing_if = "Option::is_none")]
    pub scrub_audio_tags: Option<bool>,
    #[serde(rename = "writeBookTags", skip_serializing_if = "Option::is_none")]
    pub write_book_tags: Option<models::WriteBookTagsType>,
    #[serde(rename = "updateCovers", skip_serializing_if = "Option::is_none")]
    pub update_covers: Option<bool>,
    #[serde(rename = "embedMetadata", skip_serializing_if = "Option::is_none")]
    pub embed_metadata: Option<bool>,
}

impl MetadataProviderConfigResource {
    pub fn new() -> MetadataProviderConfigResource {
        MetadataProviderConfigResource {
            id: None,
            write_audio_tags: None,
            scrub_audio_tags: None,
            write_book_tags: None,
            update_covers: None,
            embed_metadata: None,
        }
    }
}

